/* Automatically generated by './build/dist.js' */
// databus
import Databus from 'utils/databus.js'
// directives
import clickoutside from './directives/clickoutside.js';
import copy from './directives/copy.js';
import debounce from './directives/debounce.js';
import draggable from './directives/draggable.js';
import focus from './directives/focus.js';
import lazyLoad from './directives/lazyLoad.js';
import limitText from './directives/limitText.js';
import permission from './directives/permission.js';
import watermarker from './directives/watermarker.js';

let databus = new Databus()

const directives = {
  clickoutside,
  copy,
  debounce,
  draggable,
  focus,
  lazyLoad,
  limitText,
  permission,
  watermarker
}

const Zery = {
  use(useList) {
    if (useList) {
      this.useList = useList
    }
  },
  install(Vue) {
    if (!this.useList) {
      this.useList = Object.keys(directives)
    }
    this.useList.forEach(item => {
      if (directives[item]) {
        Vue.directive(item, directives[item])
      } else {
        throw new Error('不存在该指令')
      }
    })
    Vue.prototype.$zery = this
  },
  setOption(options) {
    if (options instanceof Object && !Array.isArray(options)) {
      databus = overwrite(databus, options)
    } else {
      throw new Error('type of options is invalid')
    }
  }
}

const overwrite = (A, B) => {
  if (B instanceof Object && !Array.isArray(B)) {
    for(let k in B) {
      if (A.hasOwnProperty(k)) {
        A[k] = overwrite(A[k], B[k])
      }
    }
  } else {
    A = B
  }
  return A
}

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue)
}

export default Zery
